Employee (Employee_id, First_name, last_name , hire_date, salary, Job_title, manager_id, department_id)
Departments(Department_id, Department_name, Manager_id, Location_id)
Locations(location_id ,street_address ,postal_code, city, state, country_id)
Manager(Manager_id, Manager_name)
Create the tables with referential integrity. Solve following queries using joins and subqueries.
1. Write a query to find the names (first_name, last_name) and the salaries of the employees who have a
higher salary than the employee whose last_name=''Singh”.
2. Write a query to find the names (first_name, last_name) of the employees who have a manager and
work for a department based in the United States.
2. Write a query to find the names (first_name, last_name), the salary of the employees whose salary is
greater than the average salary.
3. Write a query to find the employee id, name (last_name) along with their manager_id, manager name
(last_name).
4. Find the names and hire date of the employees who were hired after 'Jones'.



-- Create Manager table
CREATE TABLE Manager (
    Manager_id INT PRIMARY KEY,
    Manager_name VARCHAR(50)
);

-- Create Locations table
CREATE TABLE Locations (
    Location_id INT PRIMARY KEY,
    Street_address VARCHAR(100),
    Postal_code VARCHAR(20),
    City VARCHAR(50),
    State VARCHAR(50),
    Country_id CHAR(2)
);

-- Create Departments table
CREATE TABLE Departments (
    Department_id INT PRIMARY KEY,
    Department_name VARCHAR(50),
    Manager_id INT,
    Location_id INT,
    FOREIGN KEY (Manager_id) REFERENCES Manager(Manager_id),
    FOREIGN KEY (Location_id) REFERENCES Locations(Location_id)
);

-- Create Employee table
CREATE TABLE Employee (
    Employee_id INT PRIMARY KEY,
    First_name VARCHAR(50),
    Last_name VARCHAR(50),
    Hire_date DATE,
    Salary DECIMAL(10, 2),
    Job_title VARCHAR(50),
    Manager_id INT,
    Department_id INT,
    FOREIGN KEY (Manager_id) REFERENCES Manager(Manager_id),
    FOREIGN KEY (Department_id) REFERENCES Departments(Department_id)
);

-- Insert values into Manager table
INSERT INTO Manager (Manager_id, Manager_name)
VALUES
    (1, 'John Doe'),
    (2, 'Jane Smith'),
    (3, 'Alice Johnson');

-- Insert values into Locations table
INSERT INTO Locations (Location_id, Street_address, Postal_code, City, State, Country_id)
VALUES
    (1, '123 Main St', '12345', 'New York', 'NY', 'US'),
    (2, '456 Elm St', '67890', 'San Francisco', 'CA', 'US'),
    (3, '789 Oak St', '11223', 'Chicago', 'IL', 'US');

-- Insert values into Departments table
INSERT INTO Departments (Department_id, Department_name, Manager_id, Location_id)
VALUES
    (1, 'Human Resources', 1, 1),
    (2, 'Finance', 2, 2),
    (3, 'IT', 3, 3);

-- Insert values into Employee table
INSERT INTO Employee (Employee_id, First_name, Last_name, Hire_date, Salary, Job_title, Manager_id, Department_id)
VALUES
    (101, 'Michael', 'Johnson', '2021-06-01', 60000.00, 'HR Specialist', 1, 1),
    (102, 'Emily', 'Davis', '2022-04-15', 75000.00, 'Financial Analyst', 2, 2),
    (103, 'David', 'Martinez', '2020-11-10', 90000.00, 'Software Developer', 3, 3);



SELECT First_name, Last_name, Salary
FROM Employee
WHERE Salary > (
    SELECT Salary
    FROM Employee
    WHERE Last_name = 'Singh'
);



SELECT e.First_name, e.Last_name
FROM Employee e
JOIN Departments d ON e.Department_id = d.Department_id
JOIN Locations l ON d.Location_id = l.Location_id
WHERE e.Manager_id IS NOT NULL AND l.Country_id = 'US';


SELECT First_name, Last_name, Salary
FROM Employee
WHERE Salary > (
    SELECT AVG(Salary)
    FROM Employee
);


SELECT e.Employee_id, e.Last_name AS Employee_Last_Name, e.Manager_id, m.Last_name AS Manager_Last_Name
FROM Employee e
JOIN Employee m ON e.Manager_id = m.Employee_id;


SELECT First_name, Last_name, Hire_date
FROM Employee
WHERE Hire_date > (
    SELECT Hire_date
    FROM Employee
    WHERE Last_name = 'Jones'
);


