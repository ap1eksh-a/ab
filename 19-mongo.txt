Create Database DYPIT using MongoDB
Create following Collections
Teachers(Tname,dno,dname,experience,salary,date_of_joining )
Students(Sname,roll_no,class)
1. Find the information about all teachers
2. Find the information about all teachers of computer department
3. Find the information about all teachers of computer,IT,and e&TC department
4. Find the information about all teachers of computer,IT,and E&TC department having
salary greate than or equl to 10000/-
5. Find the student information having roll_no = 2 or Sname=xyz
6. Update the experience of teacher-praveen to 10years, if the entry is not available in
database consider the entry as new entry.
7. Update the deparment of all the teachers working in IT deprtment to COMP
8. find the teachers name and their experience from teachers collection
9. Using Save() method insert one entry in department collection
10. Using Save() method change the dept of teacher Rajesh to IT
11. Delete all the doccuments from teachers collection having IT dept.
12. display with pretty() method, the first 3 doccuments in teachers collection in ascending
order

use DYPIT;
2. Create Collections:
js
Copy code
db.createCollection("Teachers");
db.createCollection("Students");
3. Insert Data into Teachers Collection:
js
Copy code
db.Teachers.insertMany([
    { Tname: "Praveen", dno: 101, dname: "Computer", experience: 8, salary: 12000, date_of_joining: new Date("2015-06-15") },
    { Tname: "Rajesh", dno: 102, dname: "IT", experience: 6, salary: 9000, date_of_joining: new Date("2017-09-22") },
    { Tname: "Snehal", dno: 103, dname: "E&TC", experience: 5, salary: 8500, date_of_joining: new Date("2018-11-11") },
    { Tname: "Amit", dno: 104, dname: "Computer", experience: 12, salary: 15000, date_of_joining: new Date("2010-01-25") }
]);

db.Students.insertMany([
    { Sname: "Anusha", roll_no: 1, class: "SE" },
    { Sname: "John", roll_no: 2, class: "SE" },
    { Sname: "Alex", roll_no: 3, class: "TE" }
]);
4. Find the information about all teachers:
js
Copy code
db.Teachers.find().pretty();
5. Find the information about all teachers of computer department:
js
Copy code
db.Teachers.find({ dname: "Computer" }).pretty();
6. Find the information about all teachers of computer, IT, and E&TC departments:
js
Copy code
db.Teachers.find({ dname: { $in: ["Computer", "IT", "E&TC"] } }).pretty();
7. Find the information about all teachers of computer, IT, and E&TC departments having salary greater than or equal to 10000:
js
Copy code
db.Teachers.find({ dname: { $in: ["Computer", "IT", "E&TC"] }, salary: { $gte: 10000 } }).pretty();
8. Find the student information having roll_no = 2 or Sname = 'xyz':
js
Copy code
db.Students.find({ $or: [{ roll_no: 2 }, { Sname: "xyz" }] }).pretty();
9. Update the experience of teacher "Praveen" to 10 years, if the entry is not available, consider it as a new entry:
js
Copy code
db.Teachers.updateOne(
    { Tname: "Praveen" },
    { $set: { experience: 10 } },
    { upsert: true }
);
10. Update the department of all the teachers working in IT department to "COMP":
js
Copy code
db.Teachers.updateMany(
    { dname: "IT" },
    { $set: { dname: "COMP" } }
);
11. Find the teachers' names and their experience from the teachers collection:
js
Copy code
db.Teachers.find({}, { Tname: 1, experience: 1, _id: 0 }).pretty();
12. Using save() method, insert one entry in department collection:
js
Copy code
db.Department.save({ dept_name: "Computer Science", location: "Building A" });
13. Using save() method, change the department of teacher "Rajesh" to "IT":
js
Copy code
db.Teachers.save({ Tname: "Rajesh", dname: "IT" });
14. Delete all the documents from teachers collection having "IT" dept:
js
Copy code
db.Teachers.deleteMany({ dname: "IT" });
15. Display with pretty() method, the first 3 documents in teachers collection in ascending order:
js
Copy code
db.Teachers.find().sort({ Tname: 1 }).limit(3).pretty();